import { BatchNormalizaton, Concat, Conv, ConvTranspose, Relu } from "./onnx.nn"

MaxPool[Pool](x: Tensor[C, H, W]): Tensor[C, H / Pool, W / Pool]

ConvBlock[Channel](x: Tensor[C, H, W]) =
  |> Conv[1, 1, 1](Trainable[Channel, C, 3, 3]("w_0"), Trainable[Channel]("b_0"))
  |> BatchNormalizaton()
  |> Relu()
  |> Conv[1, 1, 1](Trainable[Channel, Channel, 3, 3]("w_1"), Trainable[Channel]("b_1"))
  |> BatchNormalizaton()
  |> Relu()

UNetEncoder[Channel](x: Tensor[C, H, W]) =
  |> ConvBlock[Channel]()
  |> MaxPool[2]()

UNetDecoder[Channel](x: Tensor[C, H, W], skip: Tensor[Channel, H * 2, W * 2]) =
  x
  |> ConvTranspose[1, 0, 2, Channel](Trainable[C, Channel, 2, 2]("w_0"), Trainable[Channel]("b_0"))
  |> Concat(skip)
  |> ConvBlock[Channel]()

UNet[Channel](x: Tensor[C, H, W]) =
  |> s1 = ConvBlock[Channel]()
  |> s2 = UNetEncoder[Channel * 2]()
  |> s3 = UNetEncoder[Channel * 4]()
  |> s4 = UNetEncoder[Channel * 8]()

  |> UNetEncoder[Channel * 16]()

  |> UNetDecoder[Channel * 8](s4)
  |> UNetDecoder[Channel * 4](s3)
  |> UNetDecoder[Channel * 2](s2)
  |> UNetDecoder[Channel](s1)
